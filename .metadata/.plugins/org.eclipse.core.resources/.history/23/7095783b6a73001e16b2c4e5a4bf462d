package com.clinica.cadastro.domain.service;

import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.clinica.cadastro.domain.dto.feign.DoctorFeign;
import com.clinica.cadastro.domain.dto.feign.PatienteFeign;
import com.clinica.cadastro.domain.exception.EntityNotFoundException;
import com.clinica.cadastro.domain.model.Doctor;
import com.clinica.cadastro.domain.model.MedicalAppointment;
import com.clinica.cadastro.domain.model.Patient;
import com.clinica.cadastro.domain.repository.AppointmentRepository;
import com.clinica.cadastro.domain.service.feign.DoctorService;
import com.clinica.cadastro.domain.service.feign.PatientService;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MedicalAppointmentService {
	
	private final PatientService patientService;
	
	private final DoctorService doctorService;
		
	private final KafkaTemplate<String, Object> kafkaTemplate;
	
	private final AppointmentRepository appointmentRepository;
	
	public List<MedicalAppointment> findAll() {
		return appointmentRepository.findAll();
	}
	
	public MedicalAppointment findAppointmentById(Long appointmentId) {
		return appointmentRepository.findById(appointmentId)
				.orElseThrow(() -> new EntityNotFoundException(
						String.format("Consulta de id %s n達o foi encontrado", appointmentId)));
	}
	
	public MedicalAppointment createAppointment(MedicalAppointment appointment) {
		Long doctorIdref = appointment.getDoctor().getDoctor_id();
		var doctor = extractDoctor(doctorIdref);
		
		Long patientIdRef = appointment.getPatient().getPatient_id();
		var patient = extractPatient(patientIdRef); 
		
		
		appointment.setDoctor(doctor);
		appointment.setPatient(patient);
		
		
		return appointmentRepository.save(appointment);
	}

	private Doctor extractDoctor(Long doctorIdref) {
		DoctorFeign doctorF = doctorService.getDoctor(doctorIdref);
		
		if(doctorF == null) {
			throw new EntityNotFoundException("Medico inexistente ou n達o registrado");
		}
		
		Doctor doctor = new Doctor();
		doctor.setDoctor_id(doctorF.getId());
		doctor.setDoctor_name(doctorF.getName());
		doctor.setDoctor_specialty(doctorF.getSpecialty());
		return doctor;
	}
	
	private Patient extractPatient(Long patientIdRef) {
		PatienteFeign patientF = patientService.getPatient(patientIdRef);
		
		if(patientF == null) {
			throw new EntityNotFoundException("Pacient inexistente ou n達o registrado");
		}
		
		Patient patient = new Patient();
		patient.setPatient_id(patientF.getId());
		patient.setPatient_name(patientF.getName());
		patient.setPatient_email(patientF.getEmail());
		patient.setPatient_phone(patientF.getPhone());
		
		return patient;
	}
	
	@Transactional
	public void deleteUserById(Long appointmentId) {
		try {
			appointmentRepository.deleteById(appointmentId);
			appointmentRepository.flush();
			
		}catch(EmptyResultDataAccessException e) {
			throw new EntityNotFoundException(
					String.format("Consulta de id %s n達o foi encontrado.", appointmentId));
		 }
	
	   }
}