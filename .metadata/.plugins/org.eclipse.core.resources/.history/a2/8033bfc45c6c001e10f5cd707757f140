package com.clinica.procedimentos.core.openapi;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.http.ProblemDetail;

import io.swagger.v3.oas.models.Components;
import io.swagger.v3.oas.models.OpenAPI;
import io.swagger.v3.oas.models.info.Info;
import io.swagger.v3.oas.models.media.Schema;
import io.swagger.v3.oas.models.media.StringSchema;

@Configuration
public class SpringDocConfig {

	@Bean
	public OpenAPI openAPI() {
		return new OpenAPI()
				.info(new Info()
						.title("ProcedimentosDB-MS")
						.version("v1")
						.description("Microsservice responsavel pelo armazenamento e consultas sobre os procedimentos"))
						.components(new Components()
                    .addSchemas("ProblemDetail", new Schema<ProblemDetail>()
                            .type("object")
                            .addProperty("type", new StringSchema().example("https://clinicas.com/errors/entity-not-found"))
                            .addProperty("title", new StringSchema().example("Procedimento não registrado"))
                            .addProperty("status", new StringSchema().example(404))
                            .addProperty("detail", new StringSchema().example("Procedimento de id 5 não foi encontrado"))
                            .addProperty("timestamp", new StringSchema().example("2023-10-16T19:32:54.253417400Z"))
							));			
	}

	 	private static final String badRequestResponse = "BadRequestResponse";
	    private static final String notFoundResponse = "NotFoundResponse";
	    private static final String notAcceptableResponse = "NotAcceptableResponse";
	    private static final String internalServerErrorResponse = "InternalServerErrorResponse";
	
	/*
	@Bean
	    public OpenApiCustomizer openApiCustomiser() {
	        return openApi -> {
	            openApi.getPaths()
	                    .values()
	                    .forEach(pathItem -> pathItem.readOperationsMap()
	                            .forEach((httpMethod, operation) -> {
	                                ApiResponses responses = operation.getResponses();
	                                switch (httpMethod) {
	                                case GET:
                                        responses.addApiResponse("406", new ApiResponse().$ref(notAcceptableResponse));
                                        responses.addApiResponse("500", new ApiResponse().$ref(internalServerErrorResponse));
                                        break;
                                    case POST:
                                        responses.addApiResponse("400", new ApiResponse().$ref(badRequestResponse));
                                        responses.addApiResponse("500", new ApiResponse().$ref(internalServerErrorResponse));
                                        break;
                                    case PUT:
                                        responses.addApiResponse("400", new ApiResponse().$ref(badRequestResponse));
                                        responses.addApiResponse("500", new ApiResponse().$ref(internalServerErrorResponse));
                                        break;
                                    case DELETE:
                                        responses.addApiResponse("500", new ApiResponse().$ref(internalServerErrorResponse));
                                        break;
                                    default:
                                        responses.addApiResponse("500", new ApiResponse().$ref(internalServerErrorResponse));
                                        break;
	                                }
	                            })
	                    );
	        };
	    } */
}
