package com.clinica.pacientes.controller.api;

import java.util.List;

import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.springframework.web.bind.annotation.RestController;

import com.clinica.pacientes.controller.modelmapper.PatientMapper;
import com.clinica.pacientes.domain.dto.PatientDTOInput;
import com.clinica.pacientes.domain.dto.PatientDTOOutput;
import com.clinica.pacientes.domain.model.Patient;
import com.clinica.pacientes.domain.service.PatientService;

import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;

@RestController
@RequestMapping("/medicos")
@RequiredArgsConstructor
public class PatientController {

	final private PatientService patientService;
	
	final private PatientMapper patientMapper;
	
	@GetMapping
	public ResponseEntity<List<PatientDTOOutput>> findAllPatients(){
		List<Patient> PatientList = patientService.findAll();
		List<PatientDTOOutput> PatientDtoList = patientMapper.toDTOCollection(PatientList);
		
		return ResponseEntity.ok(PatientDtoList);
	}
	
	@GetMapping("/{patientId}")
	public ResponseEntity<PatientDTOOutput> findPatientById(@PathVariable Long patientId){
		Patient Patient = patientService.findById(patientId);
		PatientDTOOutput PatientDto = patientMapper.toDTO(Patient);
		
		return ResponseEntity.ok(PatientDto);
	}
	
	@PostMapping
	@ResponseStatus(code = HttpStatus.CREATED)
	public ResponseEntity<PatientDTOOutput> createPatient(@RequestBody @Valid PatientDTOInput dtoInput){
		Patient Patient = patientMapper.toEntity(dtoInput);
		Patient = patientService.savePatient(Patient);

		PatientDTOOutput PatientDto = patientMapper.toDTO(Patient);
		return ResponseEntity.ok().body(PatientDto);
	}
	
	@PutMapping("/{patientId}")
	public ResponseEntity<PatientDTOOutput> updatePatient(@PathVariable Long patientId, @RequestBody @Valid PatientDTOInput dtoInput){
		Patient PatientInDb = patientService.findById(patientId);
		patientMapper.copyToDomain(dtoInput, PatientInDb);
		
		PatientInDb = patientService.savePatient(PatientInDb);
		PatientDTOOutput PatientDto = patientMapper.toDTO(PatientInDb);
		
		
		return ResponseEntity.ok(PatientDto);
	}
	
	@DeleteMapping("/{patientId}")
	@ResponseStatus(code = HttpStatus.NO_CONTENT)
	public void deletePatientById(@PathVariable Long patientId){
		patientService.deletePatientById(patientId);
	}
	
	
}
