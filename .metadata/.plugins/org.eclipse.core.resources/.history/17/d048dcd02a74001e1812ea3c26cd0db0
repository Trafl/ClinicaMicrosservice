package com.clinica.cadastro.core.modelmapper;

import java.time.LocalDate;
import java.time.LocalDateTime;
import java.time.ZoneId;
import java.util.Date;

import org.modelmapper.AbstractConverter;
import org.modelmapper.Converter;
import org.modelmapper.ModelMapper;
import org.modelmapper.TypeMap;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

import com.clinica.cadastro.domain.dto.output.DoctorOutput;
import com.clinica.cadastro.domain.dto.output.MedicalAppointmentOutPut;
import com.clinica.cadastro.domain.dto.output.PatienteOutPut;
import com.clinica.cadastro.domain.dto.output.ProcedureDTOOutput;
import com.clinica.cadastro.domain.model.Doctor;
import com.clinica.cadastro.domain.model.MedicalAppointment;
import com.clinica.cadastro.domain.model.Patient;
import com.clinica.cadastro.domain.model.Procedure;

@Configuration
public class ModelMapperConfig {

	@Bean
	public ModelMapper modelMapper() {
		
		var modelMapper = new ModelMapper();
		
		TypeMap<Doctor, DoctorOutput> doctorTypeMap = modelMapper.createTypeMap(Doctor.class, DoctorOutput.class);
		doctorTypeMap.addMapping(doctor -> doctor.getDoctor_name(), DoctorOutput::setName)
			     	.addMapping(doctor -> doctor.getDoctor_specialty(), DoctorOutput::setSpecialty);
		
		TypeMap<Patient, PatienteOutPut> patientTypeMap = modelMapper.createTypeMap(Patient.class, PatienteOutPut.class);
		patientTypeMap.addMapping(src -> src.getPatient_name(), PatienteOutPut::setName)
					  .addMapping(patient -> patient.getPatient_email(), PatienteOutPut::setEmail)
					  .addMapping(patient -> patient.getPatient_phone(), PatienteOutPut::setPhone);
		
		TypeMap<Procedure, ProcedureDTOOutput> procedureTypeMap = modelMapper.createTypeMap(Procedure.class, ProcedureDTOOutput.class);
		procedureTypeMap.addMapping(procedure -> procedure.getProcedure_name(), ProcedureDTOOutput::setName)
						.addMapping(procedure -> procedure.getProcedure_value(), ProcedureDTOOutput::setValue);

        TypeMap<MedicalAppointment, MedicalAppointmentOutPut> medicalAppointmentTypeMap = modelMapper.createTypeMap(MedicalAppointment.class, MedicalAppointmentOutPut.class);
        medicalAppointmentTypeMap.addMapping(appointment -> appointment.getDate(), MedicalAppointmentOutPut::setDate);
		
		/*
        modelMapper.addConverter(dateToLocalDateConverter);
        modelMapper.addConverter(localDateTimeToDateConverter);
        
        Date date = new Date();
        LocalDate localDate = modelMapper.map(date, LocalDate.class);
        System.out.println("Date to LocalDate: " + localDate);
        
        LocalDate localDate2 = LocalDate.now();
        Date date2 = modelMapper.map(localDate2, Date.class);
        System.out.println("LocalDate to Date: " + date2);
        */
		
		return modelMapper;
	}
	
	private static Converter<Date, LocalDate> dateToLocalDateConverter = new AbstractConverter<Date, LocalDate>() {
        protected LocalDate convert(Date source) {
            return source.toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
        }
    };
    
    private static Converter<LocalDateTime, Date> localDateTimeToDateConverter = new AbstractConverter<LocalDateTime, Date>() {
        protected Date convert(LocalDateTime source) {
            return Date.from(source.atZone(ZoneId.systemDefault()).toInstant());
        }
    };
}
