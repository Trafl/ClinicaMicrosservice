package com.clinica.cadastro.domain.service;

import java.util.List;

import org.springframework.dao.EmptyResultDataAccessException;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.stereotype.Service;

import com.clinica.cadastro.domain.dto.output.DoctorFeign;
import com.clinica.cadastro.domain.exception.EntityNotFoundException;
import com.clinica.cadastro.domain.model.Doctor;
import com.clinica.cadastro.domain.model.MedicalAppointment;
import com.clinica.cadastro.domain.repository.AppointmentRepository;
import com.clinica.cadastro.domain.service.feign.DoctorService;

import jakarta.transaction.Transactional;
import lombok.RequiredArgsConstructor;

@Service
@RequiredArgsConstructor
public class MedicalAppointmentService {
	
	private final DoctorService doctorService;
		
	private final KafkaTemplate<String, Object> kafkaTemplate;
	
	private final AppointmentRepository appointmentRepository;
	
	public List<MedicalAppointment> findAll() {
		return appointmentRepository.findAll();
	}
	
	public MedicalAppointment findAppointmentById(Long appointmentId) {
		return appointmentRepository.findById(appointmentId)
				.orElseThrow(() -> new EntityNotFoundException(
						String.format("Consulta de id %s não foi encontrado", appointmentId)));
	}
	
	public MedicalAppointment createAppointment(MedicalAppointment appointment) {
		Long doctorIdref = appointment.getDoctor().getDoctor_id();
		var doctor = extractDoctor(doctorIdref);
		
		appointment.setDoctor(doctor);
		
		
		return appointmentRepository.save(appointment);
	}

	private Doctor extractDoctor(Long doctorIdref) {
		DoctorFeign doctor = doctorService.getDoctor(doctorIdref);
		
		if(doctor == null) {
			throw new EntityNotFoundException("Medico inexistente ou não registrado");
		}
		
		Doctor doc = new Doctor();
		doc.setDoctor_id(doctor.getId());
		doc.setDoctor_name(doc.getDoctor_name());
		doc.setDoctor_specialty(doctor.getSpecialty());
		return doc;
	}
	
	@Transactional
	public void deleteUserById(Long appointmentId) {
		try {
			appointmentRepository.deleteById(appointmentId);
			appointmentRepository.flush();
			
		}catch(EmptyResultDataAccessException e) {
			throw new EntityNotFoundException(
					String.format("Consulta de id %s não foi encontrado.", appointmentId));
		 }
	
	   }
}